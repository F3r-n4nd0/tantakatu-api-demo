// Code generated by go-swagger; DO NOT EDIT.

package items

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "api.tantakatu.com/models"
)

// ListItemsReader is a Reader for the ListItems structure.
type ListItemsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListItemsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListItemsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 422:
		result := NewListItemsUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewListItemsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewListItemsOK creates a ListItemsOK with default headers values
func NewListItemsOK() *ListItemsOK {
	return &ListItemsOK{}
}

/*ListItemsOK handles this case with default header values.

Successful response
*/
type ListItemsOK struct {
	/*the last task id known to the application
	 */
	XLastTaskID int64

	Payload []*models.ItemList
}

func (o *ListItemsOK) Error() string {
	return fmt.Sprintf("[GET /items][%d] listItemsOK  %+v", 200, o.Payload)
}

func (o *ListItemsOK) GetPayload() []*models.ItemList {
	return o.Payload
}

func (o *ListItemsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-Last-Task-Id
	xLastTaskId, err := swag.ConvertInt64(response.GetHeader("X-Last-Task-Id"))
	if err != nil {
		return errors.InvalidType("X-Last-Task-Id", "header", "int64", response.GetHeader("X-Last-Task-Id"))
	}
	o.XLastTaskID = xLastTaskId

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListItemsUnprocessableEntity creates a ListItemsUnprocessableEntity with default headers values
func NewListItemsUnprocessableEntity() *ListItemsUnprocessableEntity {
	return &ListItemsUnprocessableEntity{}
}

/*ListItemsUnprocessableEntity handles this case with default header values.

Validation error
*/
type ListItemsUnprocessableEntity struct {
	Payload *models.ValidationError
}

func (o *ListItemsUnprocessableEntity) Error() string {
	return fmt.Sprintf("[GET /items][%d] listItemsUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *ListItemsUnprocessableEntity) GetPayload() *models.ValidationError {
	return o.Payload
}

func (o *ListItemsUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ValidationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListItemsDefault creates a ListItemsDefault with default headers values
func NewListItemsDefault(code int) *ListItemsDefault {
	return &ListItemsDefault{
		_statusCode: code,
	}
}

/*ListItemsDefault handles this case with default header values.

Error response
*/
type ListItemsDefault struct {
	_statusCode int

	XErrorCode string

	Payload *models.Error
}

// Code gets the status code for the list items default response
func (o *ListItemsDefault) Code() int {
	return o._statusCode
}

func (o *ListItemsDefault) Error() string {
	return fmt.Sprintf("[GET /items][%d] listItems default  %+v", o._statusCode, o.Payload)
}

func (o *ListItemsDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListItemsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-Error-Code
	o.XErrorCode = response.GetHeader("X-Error-Code")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
